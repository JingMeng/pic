

1. 枷锁加的太大不好


------针对非静态方法 -------- 这个测试一下
比如加载方法上，会导致A方法和B方法都被锁住

你A方法被枷锁了，B方法也会等待
因为你们使用的是同一个监视器枷锁的

都是当前的对象


A ---》D(枷锁) ---》 F 
A ---》B(枷锁) ---》 F 

A和F打印一下时间， 枷锁的那一块固定一下耗时

使用threadlocal 去计算时间



2.

使用监视器小一点会很好一点

静态方法的监视器是当前的class



3.

那部分需要保持同步的那部分就需要 枷锁
是否被共享

lru算法的枷锁你可以看看

sp是否线程安全的


4.

纯读的不算，写的算
==============================================

也就是意味着，如果一个类里面是读取的部分可以不加锁
但是写入的地方必须要枷锁保持安全，整个类都必须统一

当然有些高手枷锁的范围比较小，有些小白可能在每个方法上都加上了锁

加上锁是可以传递的



5.






















